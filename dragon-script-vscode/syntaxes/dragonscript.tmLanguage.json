{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "DragonScript",
	"scopeName": "source.dragonscript",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#literals"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#punctuation"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#identifiers"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"include": "#comments-inline"
				},
				{
					"include": "#comments-block"
				}
			]
		},
		"comments-inline": {
			"patterns": [
				{
					"name": "comment.line.double-slash.dragonscript",
					"begin": "//",
					"end": "$"
				}
			]
		},
		"comments-block": {
			"patterns": [
				{
					"name": "comment.block.dragonscript",
					"begin": "/\\*",
					"end": "\\*/",
					"patterns": [
						{
							"include": "#comments-block"
						}
					]
				}
			]
		},
		"punctuation": {
			"patterns": [
				{
					"name": "punctuation.comma.dragonscript",
					"match": ","
				},
				{
					"name": "punctuation.terminator.dragonscript",
					"match": ";"
				},
				{
					"name": "punctuation.dot.dragonscript",
					"match": "\\."
				},
				{
					"name": "punctuation.arrow.dragonscript",
					"match": "->"
				},
				{
					"name": "punctuation.colon.dragonscript",
					"match": ":"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"include": "#keywords-flow"
				},
				{
					"include": "#keywords-declaration"
				},
				{
					"include": "#keywords-modifier"
				},
				{
					"include": "#keywords-vars"
				},
				{
					"include": "#keywords-types"
				},
				{
					"name": "keyword.other.dragonscript",
					"match": "\\b(use|mod|copy|move)\\b"
				}
			]
		},
		"keywords-flow": {
			"patterns": [
				{
					"name": "keyword.control.dragonscript",
					"match": "\\b(if|else|elif|for|return|break|continue|in)\\b"
				}
			]
		},
		"keywords-declaration": {
			"patterns": [
				{
					"name": "keyword.declaration.dragonscript",
					"match": "\\bfunction\\b"
				}
			]
		},
		"keywords-modifier": {
			"patterns": [
				{
					"name": "storage.modifier.dragonscript",
					"match": "\\bmut\\b"
				}
			]
		},
		"keywords-vars": {
			"patterns": [
				{
					"name": "variable.language.dragonscript",
					"match": "\\b(super|self)\\b"
				}
			]
		},
		"keywords-types": {
			"patterns": [
				{
					"name": "storage.type.core.dragonscript",
					"match": "\\b(bool|int|float|sym|str|list|obj)\\b"
				},
				{
					"comment": "These types have very special meanings",
					"name": "support.type.dragonscript",
					"match": "\\b(any|none|never|error|fn)\\b"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"include": "#operators-numeric"
				},
				{
					"include": "#operators-collections"
				},
				{
					"include": "#operators-assignment"
				},
				{
					"include": "#operators-error"
				},
				{
					"name": "keyword.operator.misc.dragonscript",
					"match": "::"
				}
			]
		},
		"operators-numeric": {
			"patterns": [
				{
					"comment": "Arithmetic",
					"name": "keyword.operator.arithmetic.dragonscript",
					"match": "(\\+|-|\\*|/|\\*\\*|%)"
				},
				{
					"comment": "Logic",
					"name": "keyword.operator.logic.dragonscript",
					"match": "\\b(and|or|xor|not)\\b"
				},
				{
					"comment": "Comparison",
					"name": "keyword.operator.comparison.dragonscript",
					"match": "(<=|>=|<|>|==|!=|=~)"
				},
				{
					"comment": "Bitwise",
					"name": "keyword.operator.bitwise.dragonscript",
					"match": "(land|lor|lxor|lnot|lsl|lsr|asr)"
				}
			]
		},
		"operators-collections": {
			"patterns": [
				{
					"name": "keyword.operator.concat.dragonscript",
					"match": "\\+\\+"
				},
				{
					"name": "keyword.operator.push.dragonscript",
					"match": "(<<|>>)"
				}
			]
		},
		"operators-assignment": {
			"patterns": [
				{
					"comment": "Basic",
					"name": "keyword.operator.assignment.dragonscript",
					"match": "(=|:=)"
				},
				{
					"comment": "Arithmetic",
					"name": "keyword.operator.assignment.dragonscript",
					"match": "(\\+=|-=|/=|\\*=|%=|\\**=)"
				},
				{
					"comment": "Error coalescing",
					"name": "keyword.operator.assignment.dragonscript",
					"match": "\\?\\?="
				}
			]
		},
		"operators-error": {
			"patterns": [
				{
					"name": "keyword.operator.error.dragonscript",
					"match": "(\\?|\\?\\?)"
				}
			]
		},
		"literals": {
			"patterns": [
				{
					"name": "constant.numeric.float.dragonscript",
					"match": "\\b[0-9][0-9_]*\\.[0-9][0-9_]*([eE][+-]?[0-9][0-9_]*)?\\b"
				},
				{
					"name": "constant.language.boolean.dragonscript",
					"match": "\\b(true|false|\\.\\.\\.)\\b"
				},
				{
					"name": "constant.language.symbol.dragonscript",
					"match": "\\^[a-zA-Z_][a-zA-Z0-9_]+\\b"
				},
				{
					"include": "#literals-integer"
				}
			]
		},
		"literals-integer": {
			"patterns": [
				{
					"name": "constant.numeric.integer.decimal.dragonscript",
					"match": "\\b[0-9][0-9_]*\\b"
				},
				{
					"name": "constant.numeric.integer.hexadecimal.dragonscript",
					"match": "\\b0x[a-fA-F0-9_]+\\b"
				},
				{
					"name": "constant.numeric.integer.octal.dragonscript",
					"match": "\\b0o[0-8_]+\\b"
				},
				{
					"name": "constant.numeric.integer.binary.dragonscript",
					"match": "\\b0b[01_]+\\b"
				},
				{
					"name": "invalid.illegal.name.dragonscript",
					"match": "\\b[0-9]+\\w+"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"include": "#strings-normal"
				},
				{
					"include": "#strings-raw"
				}
			]
		},
		"strings-normal": {
			"name": "string.quoted.double.dragonscript",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.dragonscript",
					"match": "\\\\."
				}
			]
		},
		"strings-raw": {
			"name": "string.quoted.single.dragonscript",
			"begin": "'",
			"end": "'"
		},
		"identifiers": {
			"patterns": [
				{
					"include": "#identifiers-builtin-functions"
				}
			]
		},
		"identifiers-builtin-functions": {
			"patterns": [
				{
					"name": "support.function.builtin.dragonscript",
					"match": "\\b(abs|divmod|enumerate|exit|filter|fold|hash|id|is_type|is_none)\\b"
				},
				{
					"name": "support.function.builtin.dragonscript",
					"match": "\\b(is_some|is_error|len|map|max|min|next|print|rev|round|sort|sum)\\b"
				},
				{
					"comment": "Casting",
					"name": "support.function.builtin.dragonscript",
					"match": "\\b(to_int|to_bool|to_float|to_str|to_sym|to_list|to_obj)\\b"
				}
			]
		}
	}
}